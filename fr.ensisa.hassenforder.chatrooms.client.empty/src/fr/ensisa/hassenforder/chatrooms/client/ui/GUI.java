package fr.ensisa.hassenforder.chatrooms.client.ui;

import fr.ensisa.hassenforder.chatrooms.client.model.ModelListener;
import fr.ensisa.hassenforder.chatrooms.client.model.Channel;
import fr.ensisa.hassenforder.chatrooms.client.model.ChannelType;
import fr.ensisa.hassenforder.chatrooms.client.model.Message;
import fr.ensisa.hassenforder.chatrooms.client.model.Model;
import javax.swing.SwingUtilities;

/**
 *
 * @author Hassenforder
 */
public class GUI extends javax.swing.JFrame implements ModelListener {

	private static final long serialVersionUID = 1L;
	
    private GUIListener listener;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    public GUI(GUIListener listener) {
        initComponents();
        setListener(listener);
    }

    public void setListener(GUIListener listener) {
        this.listener = listener;
    }

    public void updateStatus (final String status) {
    	if (status == null) {
            jStatus.setText("");
    	} else {
            jStatus.setText(status);
    	}
    }

    @Override
    synchronized public void updateConnection(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (model.isConnected()) jConnection.setText("disconnect");
                else jConnection.setText("connect");
                updateStatus(status);
            }
        });
    }

    @Override
    public void updateChannelCreated(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateStatus(status);
            }
        });
    }

    @Override
    synchronized public void updateChannelList(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jChannels.removeAll();
                jChannelUsed.removeAllItems();
                for (Channel c : model.getChannels()) {
                    jChannels.add (new ChannelDescriptionUI(c, listener));
                    if (c.isSubscribed()) jChannelUsed.addItem (c.getName());
                }
                jChannels.revalidate();
                jChannels.repaint();
                updateStatus(status);
            }
        });
    }

    public void updateSubscribtionChange(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateStatus(status);
            }
        });
    }

    @Override
    synchronized public void updateModerationList(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jModerations.removeAll();
                for (Message m : model.getPendingMessages()) {
                    jModerations.add (new MessageModerationUI(m, listener));
                }
                jModerations.revalidate();
                jModerations.repaint();
                updateStatus(status);
            }
        });
    }

    private int count = 0;
    @Override
    public void updateModerationState(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	jMessage.setText("message_"+count);
            	++count;
                updateStatus(status);
            }
        });
    }

    @Override
	public void updateMessageSent(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateStatus(status);
            }
        });
	}

	@Override
    synchronized public void updateMessageList(final Model model, final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jMessages.removeAll();
                for (Message m : model.getIncomingMessages()) {
                    jMessages.add (new MessageUI(m, listener));
                }
                jMessages.revalidate();
                jMessages.repaint();
                updateStatus(status);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jChannels = new javax.swing.JPanel();
        jSubscriber = new javax.swing.JTextField();
        jConnection = new javax.swing.JButton();
        jChannelName = new javax.swing.JTextField();
        jChannelCreate = new javax.swing.JButton();
        jChannelType = new javax.swing.JComboBox<>();
        jChannelLoad = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jModerations = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMessages = new javax.swing.JPanel();
        jMessage = new javax.swing.JTextField();
        jChannelUsed = new javax.swing.JComboBox<>();
        jStatus = new javax.swing.JLabel();
        jMessagesClear = new javax.swing.JButton();
        jMessagesLoad = new javax.swing.JButton();
        jPendingLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jChannels.setLayout(new javax.swing.BoxLayout(jChannels, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jChannels);

        jSubscriber.setText("subscriber");

        jConnection.setText("connect");
        jConnection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jConnectionMouseClicked(evt);
            }
        });

        jChannelName.setText("name");

        jChannelCreate.setText("create");
        jChannelCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jChannelCreateMouseClicked(evt);
            }
        });

        jChannelType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "free", "moderated" }));

        jChannelLoad.setText("load");
        jChannelLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jChannelLoadMouseClicked(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jModerations.setLayout(new javax.swing.BoxLayout(jModerations, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jModerations);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jMessages.setLayout(new javax.swing.BoxLayout(jMessages, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane3.setViewportView(jMessages);

        jMessage.setText("messageText");
        jMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jMessageKeyTyped(evt);
            }
        });

        jChannelUsed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jStatus.setText("status");

        jMessagesClear.setText("clear");
        jMessagesClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMessagesClearMouseClicked(evt);
            }
        });

        jMessagesLoad.setText("messages");
        jMessagesLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMessagesLoadMouseClicked(evt);
            }
        });

        jPendingLoad.setText("pending");
        jPendingLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPendingLoadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jChannelName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSubscriber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jChannelCreate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jChannelLoad))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPendingLoad)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jMessagesLoad))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jChannelUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jMessagesClear)))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSubscriber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jConnection))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jChannelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jChannelCreate)
                            .addComponent(jChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jChannelLoad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jChannelUsed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMessagesClear)
                            .addComponent(jMessagesLoad)
                            .addComponent(jPendingLoad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jConnectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConnectionMouseClicked
        if (listener != null) {
            final String name = jSubscriber.getText();
            new Thread () {
                public void run () {
                    listener.notifyConnection(name);
                }
            }.start();
        }
    }//GEN-LAST:event_jConnectionMouseClicked

    private void jChannelLoadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jChannelLoadMouseClicked
        if (listener != null) {
            new Thread () {
                public void run () {
                    listener.notifyChannelLoadAll ();
                }
            }.start();
        }
    }//GEN-LAST:event_jChannelLoadMouseClicked

    private void jChannelCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jChannelCreateMouseClicked
        if (listener != null) {
            final String name = jChannelName.getText();
            final ChannelType type = ChannelType.valueOf(jChannelType.getSelectedItem().toString().toUpperCase());
                new Thread () {
                    public void run () {
                        listener.notifyChannelCreation(name, type);
                    }
                }.start();
        }
    }//GEN-LAST:event_jChannelCreateMouseClicked

    private void jMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMessageKeyTyped
        if (listener != null) {
            if (evt.getKeyChar() == '\n') {
                final String channelName = jChannelUsed.getSelectedItem().toString();
                final String text = jMessage.getText();
                new Thread () {
                    public void run () {
                        listener.notifySendMessage(channelName, text);
                    }
                }.start();
            }
        }
    }//GEN-LAST:event_jMessageKeyTyped

    private void jMessagesClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMessagesClearMouseClicked
        new Thread () {
            public void run () {
                listener.notifyClearMessages();
            }
        }.start();
    }//GEN-LAST:event_jMessagesClearMouseClicked

    private void jMessagesLoadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMessagesLoadMouseClicked
        new Thread () {
            public void run () {
                listener.notifyMessagesLoad();
            }
        }.start();
    }//GEN-LAST:event_jMessagesLoadMouseClicked

    private void jPendingLoadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPendingLoadMouseClicked
        new Thread () {
            public void run () {
                listener.notifyModerationsLoad();
            }
        }.start();
    }//GEN-LAST:event_jPendingLoadMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jChannelCreate;
    private javax.swing.JButton jChannelLoad;
    private javax.swing.JTextField jChannelName;
    private javax.swing.JComboBox<String> jChannelType;
    private javax.swing.JComboBox<String> jChannelUsed;
    private javax.swing.JPanel jChannels;
    private javax.swing.JButton jConnection;
    private javax.swing.JTextField jMessage;
    private javax.swing.JPanel jMessages;
    private javax.swing.JButton jMessagesClear;
    private javax.swing.JButton jMessagesLoad;
    private javax.swing.JPanel jModerations;
    private javax.swing.JButton jPendingLoad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jStatus;
    private javax.swing.JTextField jSubscriber;
    // End of variables declaration//GEN-END:variables

}
